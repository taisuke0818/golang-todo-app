// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: todo/v1/todo.proto

package protobuf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TodoTask with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TodoTask) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TodoTask with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TodoTaskMultiError, or nil
// if none found.
func (m *TodoTask) ValidateAll() error {
	return m.validate(true)
}

func (m *TodoTask) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TodoTaskId

	// no validation rules for Contents

	// no validation rules for Priority

	// no validation rules for Completed

	// no validation rules for DeletedAt

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return TodoTaskMultiError(errors)
	}

	return nil
}

// TodoTaskMultiError is an error wrapping multiple validation errors returned
// by TodoTask.ValidateAll() if the designated constraints aren't met.
type TodoTaskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TodoTaskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TodoTaskMultiError) AllErrors() []error { return m }

// TodoTaskValidationError is the validation error returned by
// TodoTask.Validate if the designated constraints aren't met.
type TodoTaskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoTaskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoTaskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoTaskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoTaskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoTaskValidationError) ErrorName() string { return "TodoTaskValidationError" }

// Error satisfies the builtin error interface
func (e TodoTaskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoTask.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoTaskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoTaskValidationError{}

// Validate checks the field values on CreateTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoTaskRequestMultiError, or nil if none found.
func (m *CreateTodoTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTodoTask() == nil {
		err := CreateTodoTaskRequestValidationError{
			field:  "TodoTask",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTodoTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTodoTaskRequestValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTodoTaskRequestValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTodoTaskRequestValidationError{
				field:  "TodoTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTodoTaskRequestMultiError(errors)
	}

	return nil
}

// CreateTodoTaskRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTodoTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTodoTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoTaskRequestMultiError) AllErrors() []error { return m }

// CreateTodoTaskRequestValidationError is the validation error returned by
// CreateTodoTaskRequest.Validate if the designated constraints aren't met.
type CreateTodoTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoTaskRequestValidationError) ErrorName() string {
	return "CreateTodoTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoTaskRequestValidationError{}

// Validate checks the field values on CreateTodoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTodoTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTodoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTodoTaskResponseMultiError, or nil if none found.
func (m *CreateTodoTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTodoTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTodoTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTodoTaskResponseValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTodoTaskResponseValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTodoTaskResponseValidationError{
				field:  "TodoTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTodoTaskResponseMultiError(errors)
	}

	return nil
}

// CreateTodoTaskResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTodoTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTodoTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTodoTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTodoTaskResponseMultiError) AllErrors() []error { return m }

// CreateTodoTaskResponseValidationError is the validation error returned by
// CreateTodoTaskResponse.Validate if the designated constraints aren't met.
type CreateTodoTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTodoTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTodoTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTodoTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTodoTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTodoTaskResponseValidationError) ErrorName() string {
	return "CreateTodoTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTodoTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTodoTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTodoTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTodoTaskResponseValidationError{}

// Validate checks the field values on ListTodoTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTodoTasksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoTasksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTodoTasksRequestMultiError, or nil if none found.
func (m *ListTodoTasksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoTasksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTodoTasksRequestMultiError(errors)
	}

	return nil
}

// ListTodoTasksRequestMultiError is an error wrapping multiple validation
// errors returned by ListTodoTasksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTodoTasksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoTasksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoTasksRequestMultiError) AllErrors() []error { return m }

// ListTodoTasksRequestValidationError is the validation error returned by
// ListTodoTasksRequest.Validate if the designated constraints aren't met.
type ListTodoTasksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoTasksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoTasksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoTasksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoTasksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoTasksRequestValidationError) ErrorName() string {
	return "ListTodoTasksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTodoTasksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoTasksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoTasksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoTasksRequestValidationError{}

// Validate checks the field values on ListTodoTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTodoTasksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTodoTasksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTodoTasksResponseMultiError, or nil if none found.
func (m *ListTodoTasksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTodoTasksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTodoTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTodoTasksResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTodoTasksResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTodoTasksResponseMultiError(errors)
	}

	return nil
}

// ListTodoTasksResponseMultiError is an error wrapping multiple validation
// errors returned by ListTodoTasksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTodoTasksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTodoTasksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTodoTasksResponseMultiError) AllErrors() []error { return m }

// ListTodoTasksResponseValidationError is the validation error returned by
// ListTodoTasksResponse.Validate if the designated constraints aren't met.
type ListTodoTasksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTodoTasksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTodoTasksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTodoTasksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTodoTasksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTodoTasksResponseValidationError) ErrorName() string {
	return "ListTodoTasksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTodoTasksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTodoTasksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTodoTasksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTodoTasksResponseValidationError{}

// Validate checks the field values on GetTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTodoTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTodoTaskRequestMultiError, or nil if none found.
func (m *GetTodoTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTodoTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTodoTaskId()) < 1 {
		err := GetTodoTaskRequestValidationError{
			field:  "TodoTaskId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetTodoTaskRequestMultiError(errors)
	}

	return nil
}

// GetTodoTaskRequestMultiError is an error wrapping multiple validation errors
// returned by GetTodoTaskRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTodoTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTodoTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTodoTaskRequestMultiError) AllErrors() []error { return m }

// GetTodoTaskRequestValidationError is the validation error returned by
// GetTodoTaskRequest.Validate if the designated constraints aren't met.
type GetTodoTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodoTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodoTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodoTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodoTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodoTaskRequestValidationError) ErrorName() string {
	return "GetTodoTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTodoTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodoTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodoTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodoTaskRequestValidationError{}

// Validate checks the field values on GetTodoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTodoTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTodoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTodoTaskResponseMultiError, or nil if none found.
func (m *GetTodoTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTodoTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTodoTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTodoTaskResponseValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTodoTaskResponseValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTodoTaskResponseValidationError{
				field:  "TodoTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTodoTaskResponseMultiError(errors)
	}

	return nil
}

// GetTodoTaskResponseMultiError is an error wrapping multiple validation
// errors returned by GetTodoTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTodoTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTodoTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTodoTaskResponseMultiError) AllErrors() []error { return m }

// GetTodoTaskResponseValidationError is the validation error returned by
// GetTodoTaskResponse.Validate if the designated constraints aren't met.
type GetTodoTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTodoTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTodoTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTodoTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTodoTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTodoTaskResponseValidationError) ErrorName() string {
	return "GetTodoTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTodoTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTodoTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTodoTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTodoTaskResponseValidationError{}

// Validate checks the field values on UpdateTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTodoTaskRequestMultiError, or nil if none found.
func (m *UpdateTodoTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTodoTask() == nil {
		err := UpdateTodoTaskRequestValidationError{
			field:  "TodoTask",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTodoTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTodoTaskRequestValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTodoTaskRequestValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTodoTaskRequestValidationError{
				field:  "TodoTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTodoTaskRequestMultiError(errors)
	}

	return nil
}

// UpdateTodoTaskRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTodoTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTodoTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoTaskRequestMultiError) AllErrors() []error { return m }

// UpdateTodoTaskRequestValidationError is the validation error returned by
// UpdateTodoTaskRequest.Validate if the designated constraints aren't met.
type UpdateTodoTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoTaskRequestValidationError) ErrorName() string {
	return "UpdateTodoTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoTaskRequestValidationError{}

// Validate checks the field values on UpdateTodoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTodoTaskResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTodoTaskResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTodoTaskResponseMultiError, or nil if none found.
func (m *UpdateTodoTaskResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTodoTaskResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTodoTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTodoTaskResponseValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTodoTaskResponseValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTodoTaskResponseValidationError{
				field:  "TodoTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTodoTaskResponseMultiError(errors)
	}

	return nil
}

// UpdateTodoTaskResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTodoTaskResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTodoTaskResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTodoTaskResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTodoTaskResponseMultiError) AllErrors() []error { return m }

// UpdateTodoTaskResponseValidationError is the validation error returned by
// UpdateTodoTaskResponse.Validate if the designated constraints aren't met.
type UpdateTodoTaskResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTodoTaskResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTodoTaskResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTodoTaskResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTodoTaskResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTodoTaskResponseValidationError) ErrorName() string {
	return "UpdateTodoTaskResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTodoTaskResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTodoTaskResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTodoTaskResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTodoTaskResponseValidationError{}

// Validate checks the field values on DeleteTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTodoTaskRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTodoTaskRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTodoTaskRequestMultiError, or nil if none found.
func (m *DeleteTodoTaskRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTodoTaskRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTodoTask() == nil {
		err := DeleteTodoTaskRequestValidationError{
			field:  "TodoTask",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTodoTask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTodoTaskRequestValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTodoTaskRequestValidationError{
					field:  "TodoTask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoTask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTodoTaskRequestValidationError{
				field:  "TodoTask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTodoTaskRequestMultiError(errors)
	}

	return nil
}

// DeleteTodoTaskRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTodoTaskRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTodoTaskRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTodoTaskRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTodoTaskRequestMultiError) AllErrors() []error { return m }

// DeleteTodoTaskRequestValidationError is the validation error returned by
// DeleteTodoTaskRequest.Validate if the designated constraints aren't met.
type DeleteTodoTaskRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTodoTaskRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTodoTaskRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTodoTaskRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTodoTaskRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTodoTaskRequestValidationError) ErrorName() string {
	return "DeleteTodoTaskRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTodoTaskRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTodoTaskRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTodoTaskRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTodoTaskRequestValidationError{}
